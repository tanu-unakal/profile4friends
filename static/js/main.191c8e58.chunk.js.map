{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","Searchbox.js","Scroll.js","ErrorBoundary.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","map","robo","key","Searchbox","searchischanged","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setstate","React","Component","App","event","setState","filtername","target","value","fetch","then","response","json","users","filteredbots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"uLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAACC,GACb,OACC,yBAAKC,UAAW,wDACf,yBAAKC,IAAM,QAAQC,IAAG,+BAA2BH,EAAMI,GAAjC,eACtB,6BACA,gCAAMJ,EAAMK,MACZ,+BAAKL,EAAMM,MAAX,QCcYC,EAnBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACA,6BAECA,EAAOC,KAAI,SAAAC,GACX,OACC,kBAAC,EAAD,CACDC,IAAKD,EAAKN,GACVA,GAAIM,EAAKN,GACTC,KAAQK,EAAKL,KACbC,MAASI,EAAKJ,aCIDM,EAfG,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBACnB,OACC,yBAAKZ,UAAY,OAEhB,2BACAA,UAAY,mCACZa,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCEAI,EATA,SAACjB,GACf,OACE,yBAAKkB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnErB,EAAMsB,WCiBIC,E,kDApBd,WAAYvB,GAAO,IAAD,8BACjB,gBACKwB,MAAO,CACXC,UAAU,GAHM,E,6DAMDC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,uCAEAG,KAAK5B,MAAMsB,a,GAfMQ,IAAMC,WCmDnBC,E,kDA7Cd,aAAc,IAAD,8BACZ,gBAmBDnB,gBAAkB,SAACoB,GAClB,EAAKC,SAAS,CACbC,WAAYF,EAAMG,OAAOC,SApB1B,EAAKb,MAAQ,CACZhB,OAAQ,GACR2B,WAAW,IAJA,E,gEAQO,IAAD,OAClBG,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MACA,SAAAG,GACC,EAAKR,SAAS,CAAC1B,OAAQkC,S,+BAWlB,IAAD,OACDC,EAAef,KAAKJ,MAAMhB,OAAOoC,QAAO,SAAAlC,GAC5C,OAAOA,EAAKL,KAAKwC,cAAcC,SAAS,EAAKtB,MAAMW,WAAWU,kBAEhE,OACA,yBAAK5C,UAAY,MAChB,wBAAIA,UAAW,uBAAf,kBACA,kBAAC,EAAD,CAAWY,gBAAiBe,KAAKf,kBACjC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUL,OAAQmC,W,GArCJb,IAAMC,WCAxBgB,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SP0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.191c8e58.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n\treturn(\n\t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw 5 shadow-5'>\n\t\t\t<img alt = 'robot' src ={`https://robohash.org/${props.id}? 200x200`}/>\n\t\t\t<div>\n\t\t\t<h2> {props.name}</h2>\n\t\t\t<p> {props.email} </p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList =({robots}) => {\n\treturn(\n\t<div>\n\t{\n\t\trobots.map(robo => {\n\t\treturn (\n\t\t\t<Card \n\t\tkey={robo.id} \n\t\tid={robo.id} \n\t\tname = {robo.name}\n\t\temail = {robo.email}\n\t\t/>\n\t\t);\n\t})\n\t}\n  \t</div> \n\t\t);\n\t}\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchischanged}) => {\n\treturn(\n\t\t<div className = 'pa2'>\n\n\t\t\t<input \n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange = {searchischanged}\n\t\t\t/>\n\n\t\t</div>\n\t\t);\n}\n\nexport default Searchbox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n\treturn(\n\t\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '700px'}}>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\n\t\t);\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component{\n\tconstructor(props){\n\t\tsuper();\n\t\tthis.state ={\n\t\t\thasError: false\n\t\t}\n\t}\n\tcompnentDidCatch(error, info){\n\t\tthis.setstate({hasError: true})\n\t}\n\n\trender(){\n\t\t\tif(this.state.hasError){\n\t\t\t\treturn <h1> sorry </h1>\n\t\t\t} else {\n\t\t\t\treturn this.props.children\n\t\t\t}\n\n\t}\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from './CardList';\nimport Searchbox from './Searchbox';\nimport Scroll from './Scroll';\nimport ErrorBoundary from './ErrorBoundary';\n\n\nclass App extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tfiltername:''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(\n\t\t\t\tusers => {\n\t\t\t\t\tthis.setState({robots: users})\n\t\t\t\t})\n\t}\n\n\n\tsearchischanged = (event)=> {\n\t\tthis.setState({\n\t\t\tfiltername: event.target.value\n\t\t})\n\t}\n\n\trender(){\n\t\tconst filteredbots = this.state.robots.filter(robo => {\n\t\t\t\treturn robo.name.toLowerCase().includes(this.state.filtername.toLowerCase());\n\t\t\t})\n\t\treturn(\n\t\t<div className = 'tc'>\n\t\t\t<h1 className= 'code f2 washed-blue'> Robo friends </h1>\n\t\t\t<Searchbox searchischanged={this.searchischanged} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t<CardList robots={filteredbots}/>\n\t\t\t\t</ErrorBoundary>\n\t\t\t</Scroll>\n\t\t</div>\n\t\t);\n\t}\n\t\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n\t<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}